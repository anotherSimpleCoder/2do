void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/anotherSimpleCoder/2do"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "Test and Build Backend"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent any

    stages {
        stage('Build and Start Backend') {
            script {
                setBuildStatus("${STAGE_NAME}", "PENDING")

                docker.image('mcr.microsoft.com/dotnet/sdk:9.0').withRun('-u root -p 5130:5130' ) {c -> 
                    sh 'dotnet restore'
                    sh 'dotnet build --no-restore'

                    sh 'dotnet tool install dotnet-ef'

                    dir('Backend') { 
                        sh 'dotnet tool run dotnet-ef database update' 
                        sh 'dotnet run &'
                    }

                    waitUntil {
                        script {
                            def result = sh(script: 'curl -sSf http://localhost:5130/api/health', returnStatus: true)
                            return result == 0
                        }
                    }
                }

                docker.image('instrumentisto/flutter:latest').withRun('-u root --network host') {c ->
                    setBuildStatus("${STAGE_NAME}", "PENDING")

                    dir('frontend') {
                        sh 'flutter pub get'
                        sh 'flutter test'
                    }
                }
            }
        }

        stage('Set GitHub status') {
            steps {
                setBuildStatus("Test complete", "SUCCESS");
            }
        }
    }
}