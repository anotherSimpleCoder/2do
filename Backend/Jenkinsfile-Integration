void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/anotherSimpleCoder/2do"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "Test and Build Backend"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent {
        docker {
            image 'mcr.microsoft.com/dotnet/sdk:9.0'
            args '-u root' 
        }
    }

    stages {
        stage('Setup .NET Core for backend') {
            steps {
                script {
                    sh 'export PATH=$PATH:$HOME/.dotnet'
                }
            }
        }
        stage('Install backend dependencies') {
            steps {
                sh 'dotnet restore'
            }
        }
        stage('Build backend') {
            steps {
                sh 'dotnet build --no-restore'
            }
        }
        stage('Set up dotnet-ef CLI') {
            steps {
                sh 'dotnet tool install dotnet-ef'
            }
        }
        stage('Set up database') {
            steps {
                dir('Backend') {
                    sh 'dotnet tool run dotnet-ef database update' 
                }
            }
        }
        stage('Start backend') {
            steps {
                dir('Backend') {
                    sh 'nohup dotnet run &'
                }
            }
        }
        stage('Waiting for backend to be ready') {
            steps {
                script {
                    sh '''
                    echo "Waiting for backend to start..."
                    while ! curl -sSf http://localhost:5130/api/health; do
                        echo "Waiting for backend to start"
                        sleep 5
                    done
                    '''
                }
            }
        }
        stage('Install dependencies for frontend') {
            environment {
                PATH = "${env.PATH}:$PWD/flutter-2/bin"
            }

            steps {
                dir('frontend') {
                    sh 'flutter pub get'
                }
            }
        }
        stage('Run tests') {
            steps {
                dir('frontend') {
                    sh 'flutter test'
                }
            }
        }
    }
}